@using PalettaPolizeiPro.Data.LineEvents
@using PalettaPolizeiPro.Data.Palettas
@if (_loaded)
{
    <ApexChart TItem="DataSeries"
               Title="@_titleText" @ref="_chart">

        <ApexPointSeries TItem="DataSeries"
                         Items="_series"
                         Name="@_titleText"
                         XValue="@(e => e.Name)"
                         YAggregate="@(e => e.Sum(e => e.Number))"
                         SeriesType="SeriesType.Bar"
                         PointColor="@(e => e.Color)" />
    </ApexChart>

}
else
{
    <MudProgressCircular Color="Color.Primary" Size="MudBlazor.Size.Large" Indeterminate="true" />
}
@code {

    [Parameter]
    public required int Loop { get; set; }

    private bool _loaded = false;
    private ApexChart<DataSeries>? _chart = new ApexChart<DataSeries>();
    private List<DataSeries> _series = new List<DataSeries>();
    private string _titleText = "";
    private List<Paletta> _palettas;
    private List<CheckEventArgs> _buffer = new List<CheckEventArgs>();
    private bool _refreshJob = true;

    protected override async Task OnInitializedAsync()
    {
        await Task.Run(Load);
        EventService.CheckEvent += DataCollector;
        StartRefreshJob();

    }
    class DataSeries
    {
        public string? Name;
        public string? Color;
        public int Number;
    }
    private void Load()
    {
        _loaded = false;
        _palettas = PalettaControl.GetPalettasWithLastProperty(x => x.Loop == Loop);
        if (_palettas.Count == 0) { return; }
        UpdateFromPalettaList();
        _loaded = true;

    }
    void UpdateFromPalettaList()
    {
        try
        {

            _series.Clear();

            _series.Add(new DataSeries { Name = "<80%", Number = 0, Color = "#1fff84" });
            _series.Add(new DataSeries { Name = "80-90%", Number = 0, Color = "#ffff1f" });
            _series.Add(new DataSeries { Name = "90-99%", Number = 0, Color = "#f76f3e" });
            _series.Add(new DataSeries { Name = ">=100%", Number = 0, Color = "#f44336ff" });
            _series.Add(new DataSeries { Name = "M", Number = 0, Color = "#1f26ff" });
            _series.Add(new DataSeries { Name = "K", Number = 0, Color = "#6eb4ff" });
            _titleText = "Loop:" + Loop;
            foreach (var p in _palettas)
            {
                Update(p);
            }
        }
        catch (Exception ex) { LogService.LogException(ex); }
    }
    private void Update(Paletta p)
    {
        var prop = p.Properties.Last();
        if (p.IsOut)
        {
            _series.Add(new DataSeries { Name = "K", Number = 1, });
        }
        else if (prop.ServicePercentage <= 80)
        {
            _series.Add(new DataSeries { Name = "<80%", Number = 1, });
        }
        else if (prop.ServicePercentage > 80 && prop.ServicePercentage < 90)
        {
            _series.Add(new DataSeries { Name = "80-90%", Number = 1, });

        }
        else if (prop.ServicePercentage >= 90 && prop.ServicePercentage <= 99.99)
        {
            _series.Add(new DataSeries { Name = "90-99%", Number = 1, });

        }
        else if (prop.ServicePercentage >= 100)
        {
            _series.Add(new DataSeries { Name = ">=100%", Number = 1, });
        }
        
        if (p.Marked)
        {
            _series.Add(new DataSeries { Name = "M", Number = 1, });
        }
    }
    void OnCheckEvent(CheckEventArgs c)
    {
        if (Loop != c.Station.Loop)
        { return; }

        var pal = _palettas.FirstOrDefault(x => x.Identifier == c.Property.Identifier);
        if (pal == null)
        {
            _palettas.Add(c.Property.Paletta);
        }
        else
        {
            pal.Properties[0] = c.Property;
        }


    }
    private void Update()
    {
        UpdateFromPalettaList();
        if (_loaded)
        {
            _chart!.UpdateSeriesAsync(true);
        }
    }

    @implements IDisposable
    public void Dispose()
    {
        _refreshJob = false;
        EventService.CheckEvent -= DataCollector;
        GC.Collect();
    }

    private void DataCollector(object? sender, CheckEventArgs args)
    {
        lock (_buffer)
        {
            _buffer.Add(args);
        }
    }
    private void StartRefreshJob()
    {
        Task.Run(async () =>
        {
            while (true)
            {
                await Task.Delay(60_000);
                if (!_refreshJob) { break; }
                lock (_buffer)
                {
                    int count = _buffer.Count();
                    foreach (var buff in _buffer)
                    {
                        OnCheckEvent(buff);
                    }
                    _buffer.Clear();
                    Update();
                    Snackbar.Add($"{count} adat frissítve", Severity.Success);
                }
            }
        });
    }
}
