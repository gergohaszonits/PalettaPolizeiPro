@using PalettaPolizeiPro.Dialogs
@using PalettaPolizeiPro.Pages
@inherits LayoutComponentBase
<style>
    .shadow {
        box-shadow: rgba(0, 0, 0, 0.25) 0px 54px 55px, rgba(0, 0, 0, 0.12) 0px -12px 30px, rgba(0, 0, 0, 0.12) 0px 4px 6px, rgba(0, 0, 0, 0.17) 0px 12px 13px, rgba(0, 0, 0, 0.09) 0px -3px 5px;
    }
</style>

<MudThemeProvider Theme="MainTheme" />
<MudDialogProvider />
<MudSnackbarProvider />
@if (MyClient.User is null)
{
    return;    
}
<MudLayout>
    <MudAppBar Color="Color.Secondary" Elevation="0">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Primary" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <MudChip Class="shadow" Color="Color.Primary" Icon="@Icons.Material.Outlined.Person2">@MyClient.User.Username</MudChip>
        <MudSpacer />
        <h3 style="color:lightblue"><i><b>Paletta Polizei</b></i></h3>
        <MudIconButton Class="ml-15" OnClick="LogOut" Icon="@Icons.Material.Filled.Logout" Color="Color.Primary" Target="_blank" />
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" Elevation="1">
        <MudDrawerHeader>
            <MudText Typo="Typo.h6">Vezérlőpult</MudText>
        </MudDrawerHeader>
        <NavMenu />
    </MudDrawer>
    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.Large" Class="my-16 pt-16">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code {

    bool _drawerOpen = true;

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (MyClient.User is null)
        {
            ShowLoginDialog();        }
        return base.OnAfterRenderAsync(firstRender);
    }
    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }
    async Task LogOut()
    {
        bool? result = await Dialog.ShowMessageBox(
             "Biztosan kijelentkezel?",
             MyClient.User!.Username,
             yesText: "Igen", cancelText: "Nem");
        if (result == true)
        {
            MyClient.User = null;
            StateHasChanged();
        }
    }
    async Task ShowLoginDialog()
    {
        try
        {
            Console.WriteLine("start show dialog");
            var dialog = await Dialog.ShowAsync<LoginDialog>("Bejelentkezés", new DialogOptions
                {
                    CloseButton = false,
                    DisableBackdropClick = true,
                    CloseOnEscapeKey = false,
                    FullScreen = false,
                });
            var result = await dialog.Result;
            UserCredentialsDTO cred = (UserCredentialsDTO)result.Data;
            var user = LoginService.LogIn(cred);
            if (user is null)
            {
                Snackbar.Add("Sikertelen bejelentkezés");
            }
            else
            {
                Snackbar.Add($"Üdvözöljük {user.Username}");
                MyClient.User = user;
            }
        }
        catch (Exception ex) { Snackbar.Add(ex.Message, Severity.Error); }
        await InvokeAsync(StateHasChanged);
    }
}