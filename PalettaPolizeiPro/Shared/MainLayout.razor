@using PalettaPolizeiPro.Data.LineEvents
@using PalettaPolizeiPro.Dialogs
@using PalettaPolizeiPro.Pages
@inherits LayoutComponentBase
<style>
    .shadow {
        box-shadow: rgba(0, 0, 0, 0.3) 0px 19px 38px, rgba(0, 0, 0, 0.22) 0px 15px 12px;
    }
</style>

<MudThemeProvider Theme="MainTheme" />
<MudDialogProvider />
<MudSnackbarProvider />
<MudPopoverProvider />
@if (MyClient.User is null)
{
    return;
}
<MudLayout>
    <MudAppBar Color="Color.Secondary" Elevation="0">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Primary" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <MudChip T="string" Class="shadow" Color="Color.Primary" Icon="@Icons.Material.Outlined.Person2">@MyClient.User.Username</MudChip>
        <MudSpacer />
        <h3 style="color:lightblue"><i><b>Paletta Polizei</b></i></h3>
        <MudIconButton Class="ml-15" OnClick="LogOut" Icon="@Icons.Material.Filled.Logout" Color="Color.Primary" Target="_blank" />
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" Elevation="1">
        <MudDrawerHeader>
            <MudText Typo="Typo.h6">Vezérlőpult</MudText>
        </MudDrawerHeader>
        <NavMenu />
    </MudDrawer>
    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.Large" Class="my-4 pt-4">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code {

    bool _drawerOpen = true;

    protected override void OnInitialized()
    {
        EventService.EksEvent += HandleEks;
    }
    private void HandleEks(object? sender,EksEventArgs e)
    {
        
        if (MyClient.User is null) { return; }
        if (MyClient.User.Eks is null) { return; }


        if (e.State == Data.EKS.EksState.Out && MyClient.LoggedInWithEks && e.Station.Id == MyClient.Station!.Id && e.EksWorkerId == MyClient.User!.Eks!.WorkerId)
        {
            MyClient.User = null;
            MyClient.LoggedInWithEks = false;
            InvokeAsync(StateHasChanged);
        }
    }
    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (MyClient.User is null)
        {
            ShowLoginDialog();
        }



        return base.OnAfterRenderAsync(firstRender);
    }
    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }
    async Task LogOut()
    {
        bool? result = await Dialog.ShowMessageBox(
             "Biztosan kijelentkezel?",
             MyClient.User!.Username,
             yesText: "Igen", cancelText: "Nem");
        if (result == true)
        {
            MyClient.User = null;
            StateHasChanged();
        }
    }
    async Task ShowLoginDialog()
    {
        try
        {
            var dialog = await Dialog.ShowAsync<LoginDialog>("Bejelentkezés", new DialogOptions
                {
                    CloseButton = false,
                    BackdropClick = false,
                    CloseOnEscapeKey = false,
                    FullScreen = false,
                });
            var result = await dialog.Result;
            User user;
            if (result.Data is User)
            {
                user = (User)result.Data;
                MyClient.LoggedInWithEks = true;
            }
            else
            {
                UserCredentialsDTO cred = (UserCredentialsDTO)result.Data;
                user = LoginService.LogIn(cred);
            }

            if (user is null)
            {
                Snackbar.Add("Sikertelen bejelentkezés");
            }
            else
            {
                Snackbar.Add($"Üdvözöljük {user.Username}");
                MyClient.User = user;
            }
        }
        catch (Exception ex) { Snackbar.Add(ex.Message, Severity.Error); }
        await InvokeAsync(StateHasChanged);
    }
    @implements IDisposable
    void IDisposable.Dispose()
    {
        EventService.EksEvent -= HandleEks;
    }
}