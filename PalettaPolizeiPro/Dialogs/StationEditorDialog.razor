@using PalettaPolizeiPro.Data.Stations
@using System.Text.RegularExpressions


<MudDialog @onkeypress="@((e)=>{if(e.Key =="Enter"){Submit();}})">
    <DialogContent>
        <div class="d-flex flex-column gap-5">

            <div>
                <MudText Typo="Typo.caption">Állomás tipús</MudText>
                <div class="d-flex " style="width:100%;justify-content:space-evenly;align-items:center;">
                    <MudButton OnClick="QueryClicked" Color="Color.Secondary" Variant="@_queryVariant">Vezérlő</MudButton>
                    <MudButton OnClick="CheckClicked" Color="Color.Secondary" Variant="@_checkVariant">Adatgyüjtő</MudButton>
                    <MudButton OnClick="EksClicked" Color="Color.Secondary" Variant="@_eksVariant">Eks pont</MudButton>
                </div>
            </div>
            <div class="d-flex">
                <MudTextField Variant="Variant.Outlined" @bind-Value="_stationName" Label="Állomás neve"></MudTextField>
            </div>
            <div class="d-flex gap-6">
                <MudTextField Variant="Variant.Outlined" @bind-Value="_stationIp" Label="IP"></MudTextField>
                <MudNumericField Min="0" Variant="Variant.Outlined" @bind-Value="_stationDb" Label="DB"></MudNumericField>
            </div>
            <div class="d-flex gap-6">
                <MudNumericField Min="0" Variant="Variant.Outlined" @bind-Value="_stationRack" Label="Rack"></MudNumericField>
                <MudNumericField Min="0" Variant="Variant.Outlined" @bind-Value="_stationSlot" Label="Szlot"></MudNumericField>
            </div>
            <div class="d-flex gap-6">
                <MudNumericField Min="0" Variant="Variant.Outlined" @bind-Value="_stationLoop" Label="Kör"></MudNumericField>
                @if (_stationType == StationType.Eks)
                {
                    <MudTextField Lines="3" Variant="Variant.Outlined" @bind-Value="_stationPcIp" Label="PC ips"></MudTextField>
                }
            </div>
        </div>
    </DialogContent>
    <DialogActions>
        @if (_editMode)
        {
            <MudButton Color="Color.Primary" OnClick="Submit">Módosít</MudButton>
        }
        else
        {
            <MudButton Color="Color.Primary" OnClick="Submit">Mentés</MudButton>
        }
    </DialogActions>
</MudDialog>
@code {

    [Parameter]
    public Station? Station { get; set; }
    private bool _editMode = false;

    [CascadingParameter] MudDialogInstance? ThisDialog { get; set; }
    private string _stationName = "";
    private string? _stationPcIp = null;

    private int _stationDb = 0;
    private int _stationLoop = 0;
    private int _stationSlot = 0;
    private int _stationRack = 0;

    private long _stationId = 0;


    private StationType _stationType = StationType.Query;

    private MudBlazor.Variant _queryVariant = Variant.Outlined;
    private MudBlazor.Variant _checkVariant = Variant.Outlined;
    private MudBlazor.Variant _eksVariant = Variant.Outlined;

    private string _stationIp = "";

    protected override void OnInitialized()
    {
        if (Station is null)
        {
            InitNew();
        }
        else
        {
            _editMode = true;
            LoadFromExisting();
        }

    }
    private void LoadFromExisting()
    {
        _stationDb = Station!.DB;
        _stationIp = Station!.Ip;
        _stationLoop = Station!.Loop;
        _stationName = Station!.Name;
        _stationRack = Station!.Rack;
        _stationSlot = Station!.Slot;
        _stationType = Station.StationType;
        _stationId = Station!.Id;
        _stationPcIp = Station!.StationPcIp;

        RenderStationType();
    }
    private void InitNew()
    {
        _stationType = MyClient.SessionMemory.StationEditorLastSelectedType;
        RenderStationType();
    }
    private void RenderStationType()
    {
        switch (_stationType)
        {
            case StationType.Check:
                CheckClicked();
                break;

            case StationType.Query:
                QueryClicked();
                break;

            case StationType.Eks:
                EksClicked();
                break;

            default:
                CheckClicked();
                break;
        }
    }
    private void Submit()
    {
        if (!Validate()) { return; }
        try
        {
            ThisDialog!.Close(new Station
                {
                    Ip = _stationIp,
                    Name = _stationName,
                    Rack = _stationRack,
                    Slot = _stationSlot,
                    DB = _stationDb,
                    IsStationOn = true,
                    Loop = _stationLoop,
                    StationType = _stationType,
                    Id = _stationId,
                    StationPcIp = _stationPcIp
                });
        }
        catch (Exception ex)
        {
            LogService.LogException(ex);
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }
    private void QueryClicked()
    {
        _stationType = StationType.Query;
        MyClient.SessionMemory.StationEditorLastSelectedType = StationType.Query;

        _queryVariant = Variant.Filled;
        _checkVariant = Variant.Outlined;
        _eksVariant = Variant.Outlined;

        InvokeAsync(StateHasChanged);
    }
    private void CheckClicked()
    {
        _stationType = StationType.Check;
        MyClient.SessionMemory.StationEditorLastSelectedType = StationType.Check;

        _queryVariant = Variant.Outlined;
        _checkVariant = Variant.Filled;
        _eksVariant = Variant.Outlined;

        InvokeAsync(StateHasChanged);
    }
    private void EksClicked()
    {
        _stationType = StationType.Eks;
        MyClient.SessionMemory.StationEditorLastSelectedType = StationType.Eks;

        _queryVariant = Variant.Outlined;
        _checkVariant = Variant.Outlined;
        _eksVariant = Variant.Filled;

        InvokeAsync(StateHasChanged);
    }
    private bool IpValidator(string ip)
    {
        string ipv4Pattern = @"^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$";
        return Regex.IsMatch(ip, ipv4Pattern);
    }
    private bool Validate()
    {
        if
        (
        string.IsNullOrWhiteSpace(_stationIp) ||
        string.IsNullOrWhiteSpace(_stationName)
        )
        {
            Snackbar.Add("Töltse ki a mezőket!", Severity.Warning);
            return false;
        }

        if (!IpValidator(_stationIp))
        {
            Snackbar.Add("Helytelen IP formátum!", Severity.Warning);
            return false;

        }
        if (_stationType == StationType.Eks)
        {
            if (string.IsNullOrWhiteSpace(_stationPcIp))
            {
                Snackbar.Add("Töltse ki a mezőket!", Severity.Warning);
                return false;
            }
        }

        return true;
    }
}
