@using PalettaPolizeiPro.Data.LineEvents
<MudDialog @onkeypress="@((e)=>{if(e.Key =="Enter"){Submit();}})">
    <DialogContent>
        <div class="d-flex flex-column gap-5">
            <MudTextField Immediate="true" Variant="Variant.Outlined" Placeholder="Név" @bind-Value="_username"></MudTextField>
            <MudTextField Immediate="true" Variant="Variant.Outlined" @bind-Value="_password" Label="Jelszó" InputType="@PasswordInput" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="ToggleShow" AdornmentAriaLabel="Jelszó mutatása" />
        </div>
        @if (MyClient.Station is not null)
        {
            <MudButton Color="Color.Success" StartIcon="@Icons.Material.Filled.VpnKey" Disabled="true">EKS belépés engedélyezve</MudButton>
            <MudText Color="Color.Success">@MyClient.Station.Name</MudText>
        }
        else
        {
            <MudButton StartIcon="@Icons.Material.Filled.VpnKeyOff" Disabled="true">EKS kulccsal való belépés nem elérhető</MudButton>
        }
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Primary" OnClick="Submit">Belépés</MudButton>
    </DialogActions>
</MudDialog>
@code {

    private string _username = String.Empty;
    private string _password = String.Empty;

    [CascadingParameter] MudDialogInstance? ThisDialog { get; set; }

    protected override void OnInitialized()
    {

        var station = StationService.Get(x => x.StationPcIp is not null && x.StationPcIp.Contains(MyClient.Ip!));
        if (station is not null)
        {
            MyClient.Station = station;
        }

        //EZT MAJD TÖRÖLNI

        if (DEBUG)
        {
            _username = "sysadmin";
            _password = "ppadmin";
            Snackbar.Add("DEBUG MODE (AUTO FILL)");
        }
        EventService.EksEvent += HandleEks;

    }
    private async void HandleEks(object sender, EksEventArgs e)
    {
        if (e.State == Data.EKS.EksState.In && MyClient.Station is not null)
        {
            if (e.Station.Id == MyClient.Station.Id)
            {
                var user = UserService.Get(x => x.Eks is not null && x.Eks.WorkerId == e.EksWorkerId);
                if (user is not null)
                {
                    await InvokeAsync(() =>
                    {
                        ThisDialog?.Close(DialogResult.Ok(user));
                    });
                }
                else
                {
                    Snackbar.Add("Ismeretlen EKS kulcs", Severity.Warning);
                }
            }

        }
        await InvokeAsync(StateHasChanged);
    }
    void Submit()
    {
        var loginData = new UserCredentialsDTO { Password = _password, Username = _username };
        ThisDialog!.Close(DialogResult.Ok(loginData));
    }

    void Cancel() => ThisDialog!.Cancel();
    bool isShow;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    void ToggleShow()
    {
        @if (isShow)
        {
            isShow = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            isShow = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }
    @implements IDisposable
    void IDisposable.Dispose()
    {
        EventService.EksEvent -= HandleEks;

    }

}
