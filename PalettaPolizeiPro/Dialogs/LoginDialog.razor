@using PalettaPolizeiPro.Data.LineEvents
<MudDialog @onkeypress="@((e)=>{if(e.Key =="Enter"){Submit();}})">
    <DialogContent>
        <div class="d-flex flex-column gap-5">
            <MudTextField Immediate="true" Variant="Variant.Outlined" Placeholder="Név" @bind-Value="_username"></MudTextField>
            <MudTextField Immediate="true" Variant="Variant.Outlined" @bind-Value="_password" Label="Jelszó" InputType="@PasswordInput" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="ToggleShow" AdornmentAriaLabel="Jelszó mutatása" />
        </div>
        <div class="d-flex flex-column gap-0">
            <MudButton Color="Color.Success" StartIcon="@Icons.Material.Filled.VpnKey" Disabled="true">EKS belépés engedélyezve</MudButton>
            <MudText Typo="Typo.caption">EKS kulcs ki és be helyezésével tudja aktiválni a bejelentkezést</MudText>
        </div>

    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Primary" OnClick="Submit">Belépés</MudButton>
    </DialogActions>
</MudDialog>

@code {

    private string _username = String.Empty;
    private string _password = String.Empty;


    [CascadingParameter] MudDialogInstance? ThisDialog { get; set; }

    protected override void OnInitialized()
    {
        //EZT MAJD TÖRÖLNI

        if (DEBUG)
        {
            _username = "sysadmin";
            _password = "ppadmin";
            Snackbar.Add("DEBUG MODE (AUTO FILL)");
        }
        EventService.EksEvent += HandleEks;

    }
    private async void HandleEks(object sender, EksEventArgs e)
    {
        if (e.State == Data.EKS.EksState.In)
        {

            var user = UserService.Get(x => x.Eks is not null && x.Eks.WorkerId == e.EksWorkerId);
            if (user is not null)
            {
                var parameters = new DialogParameters<ConfirmEksLoginDialog>();
                parameters.Add(x => x.WorkerId, user.Eks!.WorkerId);
                var dialog = await Dialog.ShowAsync<ConfirmEksLoginDialog>("EKS bejelentkezés", parameters, new DialogOptions
                    {
                        CloseButton = false,
                        CloseOnEscapeKey = false,
                        MaxWidth = MaxWidth.Small,
                        FullScreen = false,
                        BackdropClick = false

                    });
                var result = await dialog.Result;
                bool? val = (bool?)result!.Data;
                if (val == false) { return; }
                MyClient.Station = e.Station;
                await InvokeAsync(() =>
                {
                    ThisDialog?.Close(DialogResult.Ok(user));
                });
            }
            else
            {
                user = new User
                    {
                        Password = HashString(GeneratePassword()),
                        Role = Role.Engineer,
                        Username = "UNNAMED",
                        Eks = new Data.EKS.Eks
                        {

                            WorkerId = e.EksWorkerId,
                        }
                    };
                UserService.AddUser(user);
                var parameters = new DialogParameters<ConfirmEksLoginDialog>();
                parameters.Add(x => x.WorkerId, user.Eks!.WorkerId);
                var dialog = await Dialog.ShowAsync<ConfirmEksLoginDialog>("EKS bejelentkezés", parameters, new DialogOptions
                    {
                        CloseButton = false,
                        CloseOnEscapeKey = false,
                        MaxWidth = MaxWidth.Small,
                        FullScreen = false,
                        BackdropClick = false

                    });
                var result = await dialog.Result;
                bool? val = (bool?)result!.Data;
                if (val == false) { return; }
                MyClient.Station = e.Station;
                await InvokeAsync(() =>
                {
                    ThisDialog?.Close(DialogResult.Ok(user));
                });
            }
        }


        await InvokeAsync(StateHasChanged);
    }
    void Submit()
    {
        var loginData = new UserCredentialsDTO { Password = _password, Username = _username };
        ThisDialog!.Close(DialogResult.Ok(loginData));
    }

    void Cancel() => ThisDialog!.Cancel();
    bool isShow;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    void ToggleShow()
    {
        @if (isShow)
        {
            isShow = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            isShow = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }
    @implements IDisposable
    void IDisposable.Dispose()
    {
        EventService.EksEvent -= HandleEks;

    }

}
