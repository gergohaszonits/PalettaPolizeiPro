@using Microsoft.AspNetCore.Mvc
@using PalettaPolizeiPro.Data.LineEvents
@using PalettaPolizeiPro.Data.Stations
@using System.Text
@implements IDisposable
<style>
    .data_row {
        max-width: 150px;
        overflow-x: auto;
        white-space: nowrap;
    }

    @@keyframes glow {
        0% {
            background-color: rgba(0, 100, 255, 0);
        }

        50% {
            background-color: rgba(0, 100, 255, 1);
        }

        100% {
            background-color: rgba(0, 100, 255, 0);
        }
    }

    .glow {
        animation: glow 0.5s;
    }
</style>
<MudTable Items="@_values" Filter="new Func<CheckEventArgs,bool>(FilterFunc)" Dense="true" Hover="true" Bordered="true" Striped="true">
    <ToolBarContent>
        <MudButton Variant="Variant.Outlined" OnClick="ExportToCSV" StartIcon="@Icons.Material.Rounded.Download">Exportálás</MudButton>
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Paletta keresés" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="MudBlazor.Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Azonosító</MudTh>
        <MudTh>Paletta</MudTh>
        <MudTh>Jelenlegi kör</MudTh>
        <MudTh>Meghatározott kör</MudTh>
        <MudTh>Százalék</MudTh>
        <MudTh>Idő</MudTh>
    </HeaderContent>
    <RowTemplate>
        @if (_values.First().Id == context.Id && _animationAllowed)
        {
            _animationAllowed = false;
            <MudTd Class="data_row glow" DataLabel="Azonosító">@context.Id</MudTd>
            <MudTd Class="data_row glow" DataLabel="Paletta">@context.Property.Identifier</MudTd>
            <MudTd Class="data_row glow" DataLabel="Jelenlegi kör">@context.Property.ActualCycle</MudTd>
            <MudTd Class="data_row glow" DataLabel="Meghatározott kör">@context.Property.PredefiniedCycle</MudTd>
            <MudTd Class="data_row glow" DataLabel="Százalék">@Math.Round(context.Property.ServicePercentage,2)%</MudTd>
            <MudTd Class="data_row glow" DataLabel="Idő">@context.Time</MudTd>
        }
        else
        {
            <MudTd Class="data_row" DataLabel="Azonosító">@context.Id</MudTd>
            <MudTd Class="data_row" DataLabel="Paletta">@context.Property.Identifier</MudTd>
            <MudTd Class="data_row" DataLabel="Jelenlegi kör">@context.Property.ActualCycle</MudTd>
            <MudTd Class="data_row" DataLabel="Meghatározott kör">@context.Property.PredefiniedCycle</MudTd>
            <MudTd Class="data_row" DataLabel="Százalék">@Math.Round(context.Property.ServicePercentage, 2)%</MudTd>
            <MudTd Class="data_row" DataLabel="Idő">@context.Time</MudTd>
        }
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
    <PagerContent>
        <MudTablePager HideRowsPerPage="true" />
    </PagerContent>
</MudTable>


@code {

    [Parameter] public required Station Station { get; set; }
    private List<CheckEventArgs> _values;

    private int _step;
    private readonly int _amount = 10;
    private string searchString = "";

    private bool _animationAllowed;

    protected override void OnInitialized()
    {
        Load();
        EventService.CheckEvent += OnValueChange;
    }

    void IDisposable.Dispose()
    {
        EventService.CheckEvent -= OnValueChange;
    }

    private void OnValueChange(object? sender, CheckEventArgs args)
    {
        if (args.StationId != Station.Id) { return; }

        _values.Insert(0, args);
        _animationAllowed = true;

        InvokeAsync(StateHasChanged);
    }


    private void Load()
    {
        _values = EventService.GetCheckEvents(x => x.StationId == Station.Id);
        InvokeAsync(StateHasChanged);
    }

    private bool FilterFunc(CheckEventArgs element) => FilterFunc(element, searchString);

    private bool FilterFunc(CheckEventArgs element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Property.Identifier.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
    private byte[] CreateCSVFromList(List<CheckEventArgs> values)
    {
        var sb = new StringBuilder();

        // Add CSV header
        sb.AppendLine("Azonosító;Paletta;Jelenlegi kör;Meghatározott kör;Százalék;Idő");

        // Add CSV rows
        foreach (var item in values)
        {
            sb.AppendLine($"{item.Id};{item.Property.Identifier};{item.Property.ActualCycle};{item.Property.PredefiniedCycle};{Math.Round(item.Property.ServicePercentage, 2)}%;{item.Time}");
        }

        return Encoding.Unicode.GetBytes(sb.ToString());
    }
    private async Task ExportToCSV()
    {
        var csvData = CreateCSVFromList(_values);
        var fileName = $"{Station.Name}.csv";
        await JS.InvokeVoidAsync("BlazorDownloadFile", fileName, "text/csv", csvData);
    }

}